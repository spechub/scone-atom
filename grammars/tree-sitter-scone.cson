id: 'scone'
name: 'Scone'
type: 'tree-sitter'
parser: 'tree-sitter-scone'
legacyScopeName: 'source.scone'

fileTypes: ['feature']

scopes:
  'feature': 'source.scone'


  'test > Then': 'constant.other'
  'test > And': 'constant.other'
  'test > dot': 'constant.other'
  'test > donot': 'constant.other'
  'test > infer': 'constant.other'
  'test > that': 'constant.other'
  'consistency_test': 'constant.other'

  'assumption > Given': 'entity.name.function'
  'assumption > And': 'entity.name.function'
  'assumption > that': 'entity.name.function'
  'assumption > dot': 'entity.name.function'

  'language_setting': 'comment.line'
  'import': 'comment.line'
  'tag': 'comment.line'
  'narrative': 'comment.line'

  'conjunction > and': 'constant.numeric'
  'or': 'constant.numeric'
  '"neither"': 'constant.numeric'
  '"nor"': 'constant.numeric'
  #'"who"': 'constant.numeric'
  #'"which"': 'constant.numeric'
  #'"that"': 'constant.numeric'
  'pronoun': 'constant.numeric'
  '"some"': 'constant.numeric'
  '"only"': 'constant.numeric'
  'not': 'constant.numeric'
  #------
  'no': 'constant.numeric'
  'every': 'constant.numeric'


  'predicate_phrase': 'string.other'
  'predicate_name > qname': 'string.other'
  'predicate_fragement > qname': 'string.other'


  '"Feature:"': 'keyword.other'
  '"Background:"': 'keyword.other'
  '"Scenario:"': 'keyword.other'
  #string.regexp, storage.type

  'definition > is_enumerated_as': 'support.variable'
  'definition > and': 'support.variable'
  'definition > is_defined_as': 'support.variable'
  'universal_positive > is_a_subclass_of': 'support.variable'
  'subclass_of': 'support.variable'
  'disjoint': 'support.variable'
  'are': 'support.variable'
  'different_KW': 'support.variable'
  'the_same_as': 'support.variable'
  'instance > is': 'support.variable'
  'instance > isnot': 'support.variable'
  'comma': 'support.variable'
  'universal_negative > is': 'support.variable'
  'universal_negative > a': 'support.variable'
  'universal_positive > is': 'support.variable'
  'pos_class > a': 'support.variable'
  'pos_class > an': 'support.variable'
  'qualifier > is': 'support.variable'
  'qname_list > and': 'support.variable'
  #'definition > is_defined_as': 'support.variable'

  #'class_atom > not': 'variable.other.identifier'
  'indiv_name': 'storage.modifier'
  'different > qname_list': 'storage.modifier'

  'class_name': 'variable.other.identifier'
  'universal_negative > qname_list': 'variable.other.identifier'

  #'qname': 'variable.other.identifier'

  #'title': 'markup.bold'

  #'ERROR': 'markup.underline'
  #invalid.illegal

  ###
  'are_different': 'constant.numeric'
  '"are different"': 'constant.numeric'
  '"are disjoint"': 'constant.numeric'
  '"no"': 'constant.numeric'
  '"is a"': 'constant.numeric'



###
###
constant.other+
---entity.name.type.class
entity.name.function+
keyword.control+
constant.language.scone selbe wie constant.other
string.other+
support.variable+
comment.line+
support.variable


#'source_file':
  'assumption > given': 'entity.name.function'
  'further_assumption > And': 'entity.name.function'
  'test > then': 'constant.language.scone' #entity.name.type.class
  'further_test > And': 'constant.language.scone' #entity.name.type.class
  'definition > is_defined_as': 'keyword.control'
  '"is enumerated as"': 'keyword.control'
  '"is a subclass of"': 'keyword.control'
#  '"is"': 'keyword.control'
  #'consistency_test > consistency': 'support.variable'
  #'consistency_test:nth-child(1)': 'constant.language'
  'inference_test > infer_start': 'keyword.other'
  #'inference_test:nth-child(1)': 'support.variable'  entity.name.type.class
  'delimiter': 'support.variable'
  'language_ID': 'support.variable'
  'source_body': 'constant.other'

  'ERROR': 'invalid.illegal'

  'tag': 'comment.line'
  'star': 'constant.numeric'

  'assumption > qname': 'invalid.illegal'
  'test > qname': 'string.other'
  'uriref': 'string.other'

  'are_different': 'keyword.other'

  'title': 'markup.bold'
  'narrative': 'comment.block'
  '"Feature:"': 'keyword.other'
  'BGround': 'keyword.other'
  '"Scenario:"': 'keyword.other'
  '"the scenario is"': 'keyword.other'
#  '"a "': 'keyword.other'
#  '"an "': 'keyword.other'
#  '"is"': 'keyword.other'
  '"are"': 'keyword.other'
  '"aren\'t"': 'keyword.other'
#  '"is"': 'keyword.other'
#  '"isn\'t"': 'keyword.other'
#  '"the "': 'keyword.other'
#  '"does"': 'keyword.other'
#  '"doesn\'t"': 'keyword.other'
#  '"has"': 'keyword.other'
#  '"hasn\'t"': 'keyword.other'
#  '"as"': 'keyword.other'
#  '"of"': 'keyword.other'
#  '"than"': 'keyword.other'
#  '"to"': 'keyword.other'
#  '"on"': 'keyword.other'
#  '"in"': 'keyword.other'
  '"are different"': 'keyword.other'
  '"the same as"': 'keyword.other'
  '"are disjoint"': 'keyword.other'
  '"no"': 'keyword.other'
  '"is a"': 'keyword.other'
  '"is a"': 'keyword.other'
  '"every"': 'keyword.other'
  '"that"': 'keyword.other'
  '"."': 'keyword.other'
  '","': 'keyword.other'
  '"Language"': 'entity.name.function'
  '"Test"': 'entity.name.function'
  '"the ontology"': 'entity.name.function'
###

folds: [

  {
    type: ['background']
    start: {type: 'BGround'}
    #end: {type: ''}
  },
  {
    type: ['scenario']
    start: {type: 'title'}
    #end: {type: ''}
  }


]
###
,
folds: [
  {
    type: ['scenario_head']
    start: {type: 'title'}
    #end: {type: 'scenario_body'}
  }
],
{
  type: ['scenario_body']
  start: {type: 'assumption_block'#'test_block', index: -1}
  #end: {type: 'scenario_body'}
}

]
###
###
  {
    type: ['scenario_body']
  #  start: {type: 'title'}
  #  end:
  }
]
###
